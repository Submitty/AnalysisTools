"""compares two graphs and lists posible isomporphisms.

file format:
list of nodes
#show isa and hasa relations in the forms:
nodeA isa nodeB
nodeD hasa nodeE
the isa node is connected to a node with a loopback and
connection to the hasa graph
"""

#!/usr/bin/env python3

import sys
from graph_tool.all import Graph
from graph_tool.all import subgraph_isomorphism
from graph_tool.all import graph_draw


def read_file(readfile):
    """Reads the file and returns a tuple which includes a graph.
    
    takes String which is a filename
    returns ({string vertex name: vertex object refrence }, 
    property map {edge object refrence:edge label}, 
    graph, propery map{vertex object refrence :stringvertex name })
    """
    in_file = open(readfile, 'r')
    graph = Graph()
    edges = graph.new_edge_property("string")
    vertexes = {}
    vertex_map = graph.new_vertex_property("string")
    for line in in_file:
        tokens = line.split()
        if len(tokens) == 1:
            vertexes[tokens[0]] = graph.add_vertex()
            vertex_map[vertexes[tokens[0]]] = tokens[0]
        elif len(tokens) == 3:
            if tokens[0] in vertexes and tokens[2] in vertexes:
                edge = graph.add_edge(vertexes[tokens[0]], vertexes[tokens[2]])
                edges[edge] = tokens[1]

    in_file.close()
    return (vertexes, edges, graph, vertex_map)

##

STUDENT_G = read_file(sys.argv[1])
SUB_G = read_file(sys.argv[2])
SUB_ISO = subgraph_isomorphism(SUB_G[2], SUB_G[2],
                               edge_label=(SUB_G[1], SUB_G[1]))
SUB_STUDENT = subgraph_isomorphism(SUB_G[2], STUDENT_G[2],
                                   edge_label=(SUB_G[1], STUDENT_G[1]))

print("number of isomorphic subgraphs: " + str(len(SUB_ISO)))
print("instances of subraph isomorphism: " + str(len(SUB_STUDENT)))

for nodename in SUB_G[0]:
    tmp = nodename + " could be: "
    vertex = SUB_G[0][nodename]
    aset = set()
    for i in range(0, len(SUB_STUDENT)):
        vertex_index = SUB_STUDENT[i][vertex]
        if not vertex_index in aset:
            aset.add(vertex_index)
            tmp = tmp +  STUDENT_G[3][STUDENT_G[2].vertex(vertex_index)] + ", "
    tmp = tmp[0:len(tmp) - 2] + "\n"
    print(tmp)

#vertex_font_size=12, edge_font_size=12,
FONT_SIZE = 14
graph_draw(STUDENT_G[2], vertex_font_size=FONT_SIZE,
           edge_font_size=FONT_SIZE, edge_text=STUDENT_G[1],
           vertex_text=STUDENT_G[3], output="STUDENT_G.png",
           edge_color=[0, 0, 0, 1], vertex_fill_color=[0.50, 0.50, 0.50, 1.0])

graph_draw(SUB_G[2], vertex_font_size=FONT_SIZE,
           edge_font_size=FONT_SIZE, edge_text=SUB_G[1],
           vertex_text=SUB_G[3], output="SUB_G.png",
           edge_color=[0, 0, 0, 1], vertex_fill_color=[0.50, 0.50, 0.50, 1.0])
