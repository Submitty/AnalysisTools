#!/usr/bin/env python3

"""
Given a directory containing student submissions, create a new directory
containing concatenated student files.
"""

import argparse
import os
import shutil
import glob
import json
import subprocess

def find_active(directory):
    """
    Find the active submission for a given user directory.
    """
    with open(os.path.join(directory, "user_assignment_settings.json")) as file:
        user_settings = json.load(file)
    active_version = user_settings["active_version"]
    return os.path.join(directory, str(active_version))

ARGPARSER = argparse.ArgumentParser(\
        description="Iterate over a directory of student submissions.")
ARGPARSER.add_argument("directory")
ARGPARSER.add_argument("pattern", nargs="*", default=None)
ARGS = ARGPARSER.parse_args()

STUDENT_FOLDERS = os.listdir(ARGS.directory)

STUDENT_ACTIVE_FOLDERS = [find_active(os.path.join(ARGS.directory, d)) for d in STUDENT_FOLDERS]

try:
    shutil.rmtree(os.path.join("plagiarism_data", "concatenated"))
except FileNotFoundError:
    pass

try:
    os.mkdir("plagiarism_data")
except FileExistsError:
    pass

try:
    os.mkdir(os.path.join("plagiarism_data", "concatenated"))
except FileExistsError:
    pass

for (s, active) in zip(STUDENT_FOLDERS, STUDENT_ACTIVE_FOLDERS):
    ALL = []
    for p in ARGS.pattern:
        ALL += glob.glob(os.path.join(active, p))
    ALL = [x for x in ALL if not ' ' in x]
    if len(ALL) > 0:
        with open(os.path.join("plagiarism_data", "concatenated", s), "w") as FILE:
            CAT = subprocess.Popen(["cat"] + ALL, stdout=FILE)
            CAT.wait()
