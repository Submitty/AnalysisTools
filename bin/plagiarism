#!/usr/bin/env python3.4

"""
Run plagiarism detection system.
"""

import sys
import os
import shutil
import argparse
import subprocess

MOD_PATH = os.path.dirname(os.path.abspath(__file__))

ARGPARSER = argparse.ArgumentParser(\
        description="Run plagiarism detection system.")
ARGPARSER.add_argument("directory")
ARGPARSER.add_argument("pattern", nargs="*", default=None)
ARGS = ARGPARSER.parse_args()

def binpath(binary):
    """Returns <MOD_PATH>/<binary>"""
    return os.path.join(MOD_PATH, binary)

try:
    shutil.rmtree(os.path.join("plagiarism_data"))
except FileNotFoundError:
    pass

if subprocess.call([binpath("concatenate"), ARGS.directory] + ARGS.pattern):
    print("Pre-tokenization concatenation failed, exiting.", file=sys.stderr)
    exit(1)

if subprocess.call([binpath("highlight"), "plagiarism_data/concatenated"]):
    print("Highlight generation failed, exiting.", file=sys.stderr)
    exit(1)

if subprocess.call([binpath("lichen"), "plagiarism_data/concatenated"]):
    print("Plagiarism detection failed, exiting.", file=sys.stderr)
    exit(1)

try:
    os.mkdir(os.path.join("plagiarism_data", "static"))
except FileExistsError:
    pass

shutil.copyfile(os.path.join(MOD_PATH, "..", "style.css"),
                os.path.join("plagiarism_data", "static", "style.css"))
