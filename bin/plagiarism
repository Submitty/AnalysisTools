#!/usr/bin/env python3.4

"""
Run plagiarism detection system.
"""

import sys
import argparse
import json
import subprocess

ARGPARSER = argparse.ArgumentParser(\
        description="Run plagiarism detection system.")
ARGPARSER.add_argument("filetype")
ARGPARSER.add_argument("directory")
ARGPARSER.add_argument("-c", "--config", type=int)
ARGS = ARGPARSER.parse_args()

with open(ARGS.config if ARGS.config else "config/plagiarism.json") as f:
    CONFIG = json.load(f)

if CONFIG[ARGS.filetype]:
    WALK_FLAGS = ["-u",
                  str(CONFIG[ARGS.filetype]["UpperBound"]),
                  "-l",
                  str(CONFIG[ARGS.filetype]["LowerBound"])]
else:
    WALK_FLAGS = []

if subprocess.call(["./bin/prewalk_layout", ARGS.directory]):
    print("Pre-tokenization concatenation failed, exiting.", file=sys.stderr)
    exit(1)

TIMESTAMP = subprocess.check_output(["./bin/walk"]
                                    + WALK_FLAGS
                                    + [ARGS.filetype,
                                       ".analysis_data/concatenated"])\
                                            .decode("utf-8").strip()

GENPAIRS = subprocess.Popen(["./bin/genpairs", TIMESTAMP],
                            stdout=subprocess.PIPE,
                            stderr=sys.stderr)

#GENPAIRS = subprocess.Popen(["./bin/genpairs_layout",
#                             os.path.join(".analysis_data",
#                                          TIMESTAMP,
#                                          ARGS.directory)],
#                            stdout=subprocess.PIPE,
#                            stderr=sys.stderr)

COMPARE_FINGERPRINTS = subprocess.Popen(["./bin/compare_fingerprints",
                                         TIMESTAMP],
                                        stdin=GENPAIRS.stdout,
                                        stdout=subprocess.PIPE,
                                        stderr=sys.stderr)

SORT = subprocess.Popen(["sort", "-nr"],
                        stdin=COMPARE_FINGERPRINTS.stdout,
                        stdout=sys.stdout,
                        stderr=sys.stderr)

SORT.wait()
