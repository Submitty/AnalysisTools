			//Tree
			
			
			var root,
			i=0,
			duration=750;

			root=file;
			i=0;
				
			root=d3.hierarchy(root,function(d){
				return d.children;
			});
			



			

			var leaves=0;
			for(var i=0;i<root.descendants().length;i++){
				if(root.descendants()[i].height==0)
					leaves++;
			}


			function collapse(d) {
				if (d.children) {
					d._children = d.children;
					d._children.forEach(collapse);
					d.children = null;
				}
			}

			var w = root.height*200;
			var margin = {top:20, right:90, bottom:140, left:50},
			width = w-margin.left-margin.right,
			height = Math.ceil(Math.sqrt(leaves))*100-margin.top-margin.bottom;


			var svg = d3.select("#tree").append("svg")
			.attr("width", width + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom),
			g = svg.append("g")
			.attr("transform",
					"translate(" + margin.left + "," + margin.top + ")");

			var treemap=d3.tree().size([height,width]);
			root.x0 = height / 2;
			root.y0 = 0;
			updateCollapse(root);
			function updateCollapse(source){
				// assigns the x and y position for the nodes
				var treeData = treemap(root);

				// compute the new tree layout
				var nodes = treeData.descendants();
				for(var i=0;i<nodes.length;i++){

					if(nodes[i].data.type!="node"){     
						//console.log(nodes[i].parent); 
						if(nodes[i].parent.children.length==1){
							nodes[i].parent.children=null;
						}
						if(nodes[i].parent.data.tags.indexOf("function")!=-1){
							nodes[i].parent.data.tags.push(nodes[i].data.data);
						}

						nodes.splice(i,1);
						i--;

					}
				}
				var links = nodes.slice(1);

				// normalise for fixed depth
				nodes.forEach(function(d) { d.y = (d.depth * 180)+margin.left; });

				// ****************** Nodes section ***************************

				// update the nodes ...
				var node = svg.selectAll('g.node')
						.data(nodes, function(d) { return d.id || (d.id = ++i); });

				// Enter any new modes at the parent's previous position.
				var nodeEnter = node.enter().append('g')
						.attr('class', 'node')
						.attr('transform', function(d) {

							return 'translate(' + (source.data.y0 + margin.top) + ',' + (source.data.x0 + margin.left) + ')';
						})
						.on('click', click);

				// add circle for the nodes
				nodeEnter.append('circle')
				.attr('class', 'node')
				.attr('r', 1e-6)
				.style('fill', function(d) {
					for(var i=0;i<d.data.tags.length;i++){
						if(d.data.tags[i].startsWith("#"))
							return d.data.tags[i];
					}
					return "#2b79a5";
					
				});

				// add labels for the nodes
				nodeEnter.append('text')
				.attr('dy', '.35em')
				.attr('x', -13)
				
				.attr('text-anchor', /*function(d) {
					return d.children || d._children ? 'middle' :}*/ 'end'
				)
				.text(function(d) {
					var str="";
					if(d.data.tags!=undefined){
						str=d.data.tags[0];

						for(var i=1;i<d.data.tags.length;++i){
							if(!d.data.tags[i].startsWith("#")){
								str+=", "+d.data.tags[i];
							}
						}
					}

					return str;
				});

				// add number of children to node circle

				// UPDATE
				var nodeUpdate = nodeEnter.merge(node);

				// transition to the proper position for the node
				nodeUpdate.transition().duration(duration)
				.attr('transform', function(d) {
					return 'translate(' + (d.y + margin.top) + ',' + (d.x + margin.left) + ')';
				});

				// update the node attributes and style
				nodeUpdate.select('circle.node')
				.attr('r', 9)
				.style('fill', function(d) {
					for(var i=0;i<d.data.tags.length;i++){
						if(d.data.tags[i].startsWith("#"))
							return d.data.tags[i];
					}
					return "#2b79a5";
				})
				.attr('cursor', 'pointer');

				// remove any exiting nodes
				var nodeExit = node.exit()
						.transition().duration(duration)
						.attr('transform', function(d) {
							return 'translate(' + (source.y + margin.top) + ',' + (source.x + margin.left) + ')';
						})
						.remove();

				// on exit reduce the node circles size to 0
				nodeExit.select('circle')
				.attr('r', 1e-6);

				// on exit reduce the opacity of text labels
				nodeExit.select('text')
				.style('fill-opacity', 1e-6);

				// ****************** links section ***************************

				// update the links
				var link = svg.selectAll('path.link')
						.data(links, function(d) { return d.id });

				// enter any new links at the parent's previous position
				var linkEnter = link.enter().insert('path', 'g')
						.attr('class', 'link')
						.style('stroke',function(d){
							for(var i=0;i<d.data.tags.length;i++){
								if(d.data.tags[i].startsWith("#"))
									return d.data.tags[i];
							}
							return "#2b79a5";
						})
						.attr('d', function(d) {
							var o = {x: source.data.x0 + margin.left, y: source.data.y0 + margin.top};
							return diagonal(o, o);
						})
						.style('stroke-opacity',"0.2");;


				// UPDATE
				var linkUpdate = linkEnter.merge(link);

				// transition back to the parent element position
				linkUpdate.transition().duration(duration)
				.attr('d', function(d) { return diagonal(d, d.parent); });

				// remove any exiting links
				var linkExit = link.exit()
						.transition().duration(duration)
						.attr('d', function(d) {
							var o = {x: source.x, y: source.y};
							return diagonal(o, o);
						})
						.remove();

				// store the old positions for transition
				nodes.forEach(function(d) {
					//console.log(d.y);
					d.data.x0 = d.x + margin.left;
					d.data.y0 = d.y + margin.top;
				});

				// creates a curved (diagonal) path from parent to the child nodes
				function diagonal(s, d) {
					path = 'M ' + (s.y + margin.top) + ' ' + (s.x + margin.left) +
							'C ' + ((s.y + d.y + (margin.top * 2)) / 2) + ' ' + (s.x + margin.left) +
							', ' + ((s.y + d.y + (margin.top * 2)) / 2) + ' ' + (d.x + margin.left) +
							', ' + (d.y + margin.top) + ' ' + (d.x + margin.left);

					return path;
				}

				// toggle children on click
				function click(d) {
					if (d.children) {
						d._children = d.children;
						d.children = null;
					} else {
						d.children = d._children;
						d._children = null;
					}
					updateCollapse(d);
				}

			}

			loadTree(file)
		</script>
	</body>
</html>